// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User  {
  id        String    @id 
  name      String
  email     String    @unique
  password  String 
  isAdmin   Boolean   @default(false)
  isUser    Boolean   @default(true)
  tasks     Task[]
  projects  Project[] @relation("UserProjects") 
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime?
}

enum TaskStatus {
  A_FAIRE
  EN_COURS
  EN_ATTENTE
  TERMINE
}

enum TaskPriority {
  FAIBLE
  MOYENNE
  ELEVEE
}


model Task {
  id             String    @id 
  title          String
  description    String? // Le '?' rend le champ facultatif
  status         TaskStatus   @default(EN_COURS)
  priority       TaskPriority   @default(MOYENNE)
  dueDate        DateTime?
  userId         String      // Clé étrangère pour lier à l'utilisateur
  user           User     @relation(fields: [userId], references: [id]) // Définition de la relation
  projectId      String?  // facultatif pour des tâches hors projet
  project        Project? @relation(fields: [projectId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime? // Pour la suppression douce
}

enum ProjectStatus {
  EN_COURS
  TERMINE
  EN_ATTENTE
}

enum ProjectPriority {
  BASSE
  MOYENNE
  HAUTE
}

model Project {
  id          String          @id 
  name        String
  description String?
  status      ProjectStatus   @default(EN_COURS)
  priority    ProjectPriority @default(MOYENNE)
  ownerId     String
  owner       User   @relation("UserProjects", fields: [ownerId], references: [id])
  tasks       Task[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
}
